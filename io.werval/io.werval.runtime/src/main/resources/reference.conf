//
// Copyright (c) 2013-2014 the original author or authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


//
// Defaults for Werval Runtime Configuration
// See https://github.com/typesafehub/config/blob/master/HOCON.md for syntax documentation
//


// == Basics

werval.character_encoding = utf-8
werval.tmpdir = ${java.io.tmpdir}/werval-tmpdir


// == HTTP

werval.http {

    # HTTP Server Listen Address
    address = "127.0.0.1"

    # HTTP Server Listen Port
    port = 23023

    # HTTP Acceptors Threads
    # Defaulted to Runtime.getRuntime().availableProcessors()
    # acceptors = 4

    # HTTP I/O Threads
    # Defaulted to Runtime.getRuntime().availableProcessors()
    # iothreads = 4

    # HTTP Timeouts
    timeout.read = 1 minute
    timeout.write = 30 seconds

    # HTTP Default Chunk Size
    chunksize = 8192

    # HTTP Logging
    log = {
        # Logging Context
        context {
            request_id = no
            client_ip = no
        }
        # Low level HTTP logging
        low_level {
            enabled = no
            level = trace
        }
    }

    # Requests
    requests.body {
        max_size = 8388608 # 8M
        disk_threshold = 4194304 # 4M
    }

    # QueryString
    query_string {
        # Multi-valued parameters
        multi_valued = no
    }

    # Headers
    headers {
        # Multi-valued headers
        multi_valued = no
        # Remote Address handling
        x_forwarded_for.enabled = yes
        x_forwarded_for.check_proxies = yes
        x_forwarded_for.trusted_proxies = [ "127.0.0.1" ]
    }

    # Forms
    forms {
        # Multi-valued attributes
        multi_valued = no
    }

    # Uploads
    uploads {
        # Multi-valued uploads
        multi_valued = no
    }

}


// == Shutdown

werval.shutdown {

    # Quiet period
    quiet_period = 1 seconds

    # Maximum amount of time to wait until ungraceful shutdown
    timeout = 5 seconds

    # If defined, will add a Retry-After HTTP header to 503 Service Unavailable responses.
    # Set it to 0 when running in a cluster to allow immediate client retry to another node.
    # retry_after = 0 seconds

}


// == Routes

werval.routes {

    # Imported Packages for routes types lookup
    imported_packages {
        controllers = [ io.werval.controllers ]
        parameters = [ java.lang, java.math, java.util, java.net, io.werval.util ]
    }

    # Registered ParameterBinders
    parameter_binders = [
        "io.werval.runtime.routes.ParameterBindersInstance$String",
        "io.werval.runtime.routes.ParameterBindersInstance$Boolean",
        "io.werval.runtime.routes.ParameterBindersInstance$Short",
        "io.werval.runtime.routes.ParameterBindersInstance$Integer",
        "io.werval.runtime.routes.ParameterBindersInstance$Long",
        "io.werval.runtime.routes.ParameterBindersInstance$Double",
        "io.werval.runtime.routes.ParameterBindersInstance$Float",
        "io.werval.runtime.routes.ParameterBindersInstance$BigInteger",
        "io.werval.runtime.routes.ParameterBindersInstance$BigDecimal",
        "io.werval.runtime.routes.ParameterBindersInstance$UUID",
        "io.werval.runtime.routes.ParameterBindersInstance$URL",
        "io.werval.runtime.routes.ParameterBindersInstance$Class",
        "io.werval.runtime.routes.ParameterBindersInstance$Duration",
        "io.werval.runtime.routes.ParameterBindersInstance$Period",
        "io.werval.runtime.routes.ParameterBindersInstance$Year",
        "io.werval.runtime.routes.ParameterBindersInstance$Month",
        "io.werval.runtime.routes.ParameterBindersInstance$DayOfWeek",
        "io.werval.runtime.routes.ParameterBindersInstance$YearMonth",
        "io.werval.runtime.routes.ParameterBindersInstance$MonthDay",
        "io.werval.runtime.routes.ParameterBindersInstance$LocalDate",
        "io.werval.runtime.routes.ParameterBindersInstance$LocalTime",
        "io.werval.runtime.routes.ParameterBindersInstance$LocalDateTime",
        "io.werval.runtime.routes.ParameterBindersInstance$OffsetTime",
        "io.werval.runtime.routes.ParameterBindersInstance$OffsetDateTime",
        "io.werval.runtime.routes.ParameterBindersInstance$ZonedDateTime",
        "io.werval.runtime.routes.ParameterBindersInstance$Hashid",
    ]

}


// == Mime Types

werval.mimetypes {

    # User defined extension to mimetype mappings.
    # supplementary {
    #     extension = "whatever/mime-type"
    # }

    # Textual mimetypes and their default character encoding mapping.
    # Test is done with startsWith, not equals, hence the default 'text/' value.
    # Value of 'default' means using werval.character-encoding.
    textual {
        "text/" = default,
        "application/json" = default
    }

}


// == Development Mode

werval.devshell {

    // Development Mode only Plugins
    // Append to this list to add plugins in development mode, that way:
    // werval.devshell.plugins = ${werval.devshell.plugins} [ { plugin = your.own.DevModePlugin } ]
    plugins.enabled = []
    plugins.routes_prefixes = {}

}


// == Application

app {

    # Application Secret Key - Must be set to run in production mode. Otherwise the application won't start.
    # secret = MANDATORY_FOR_PRODUCTION_APPLICATION_SECRET

    # Application Banner
    banner = banner.txt

    # FQCN of the Application Global object class
    global = io.werval.api.Global

    # Name or FQCNs of Application Plugins
    plugins.enabled = []
    plugins.routes_prefixes = {}

    # Available Langs
    langs = []

    # Maximum number of errors recorded in Application::errors()
    errors.record.max = 100

    # Session
    session {
        # Name of the session cookie
        cookie.name = WERVAL_SESSION
        # Path of the session cookie
        cookie.path = /
        # Enable session sharing between subdomains
        # An empty value means using the default specific domain behaviour
        # cookie.domain =
        # Enable the 'Secure' flag on the session cookie for use with HTTPS
        cookie.secure = no
        # Enable the 'HTTP Only' flag on the session cookie, see http://www.owasp.org/index.php/HttpOnly
        cookie.http_only = yes
        # Send the session cookie only if session has changed?
        cookie.only_if_changed = yes
    }

    # Executor Services
    executors {
        
        # Shutdown timeout
        # Don't set it higher than werval.shutdown.timeout
        shutdown.timeout = 2 seconds

        # Name of the default Application Executor
        default = werval_app_executor

        # Default Application Executor
        werval_app_executor {

            # Can be 'thread-pool' or 'fork-join'
            type = thread-pool

            # Means 'pool size' when type is 'thread-pool'
            # Means 'parallelism' when type is 'fork-join'
            # Defaulted to Runtime.getRuntime().availableProcessors()
            # count = 4

            # Threads name prefix, thread number will be appended
            thread_name_prefix = werval_app_thread

        }
    }

}
