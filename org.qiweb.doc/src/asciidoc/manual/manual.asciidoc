
=== Introduction

QiWeb is a HTTP development kit. QiWeb is not a full stack framework.

In other words, QiWeb don't compell you to use any persistence mechanism nor templating engine. You are free to choose
whatever may suit your needs.

Autrement dit, QiWeb n'impose aucun choix technique quand au système de stockage de données utilisé par votre
application ni sur la façon dont vous voulez construire vos vues. Il vous laisse le champ libre pour choisir la
solution qui vous convient.


TIP: TODO Faire un schema un peu comme pour Qi4j Core


=== Application Structure

A QiWeb Application is nothing but a plain old Java program. The framework provide a default `main` method for you to
reuse but you can also write yours if you need it. The minimal requirements are a configuration file and routes
definition.


=== Logging

The QiWeb Runtime use http://slf4j.org/[SLF4J] and http://logback.qos.ch/[Logback] logging and do not do anything
special regarding its configuration. This means that you have full controll of Logback configuration. Therefore you are
encouraged to read the official http://logback.qos.ch/documentation.html[Logback documentation].

All QiWeb loggers are present in the `org.qiweb` namespace. Here are the most useful:

- `org.qiweb.runtime.server` QiWeb Http Server
- `org.qiweb.runtime.routes` QiWeb Http Router
- `org.qiweb.runtime.controllers` QiWeb Controller
- `org.qiweb.runtime.filters` QiWeb Controller Filters
- etc...


=== Configuration

INFO: QiWeb configuration use the https://github.com/typesafehub/config/blob/master/HOCON.md[HOCON format] ("Human
Optimized Config Object Notation"). It is parsed using Typesafe https://github.com/typesafehub/config[Config].

The `application.conf` file must be present at the root of your classpath and must at least contain one single entry:
`app.secret` which is the secret key your application will use to sign session cookies. For all other configuration
properties, the QiWeb Runtime provide a `reference.conf` file that the Config library automatically loads. You can of
course override all theses configuration properties in your `application.conf` file.

If you need to add configuration properties for your application you are encouraged to do so in your `application.conf`
file.

All configuration properties are available to your controllers and filters via the Context object.

    public Outcome aControllerMethod()
    {
        application().config().getString( "your.custom.config.key" );
        // ...
        return outcomes().ok().build();
    }

All configuration properties can be overriden by defining System Properties. This means that you can easily provide all
configuration on the command line.

Moreover, some special System Properties allow to use an alternate config file:

- `config.resource` to load configuration from the classpath
- `config.file` to load configuration from the filesystem
- `config.url` to load configuration from an URL

Note that this will replace the `application.conf` file, not add to it. You still can leverage the inclusion mechanism
of HOCON to include your `application.conf` file from the one you specified using one of the System Properties described
above.


=== Lifecycle and the Global object

==== Application events

==== Instanciation

==== Invocation


=== Routes


=== Controllers


=== Outcomes


=== Filters


=== Session

As QiWeb is stateless oriented, it provides no way to keep session state server side. Instead a simple session Cookie is
used to keep state accross user requests.

The Session Cookie contains a `Map<String,String>` and is signed using the mandatory Application Secret. Signature use
the HmacSHA1 algorithm.


=== Cookies


=== Forms & Uploads


=== WebSockets


