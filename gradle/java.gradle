apply from: "$rootProject.projectDir.absolutePath/../gradle/common.gradle"

apply plugin: 'java'
apply plugin: 'maven'

apply from: "$rootProject.projectDir.absolutePath/../gradle/repositories.gradle"
apply from: "$rootProject.projectDir.absolutePath/../gradle/libraries.gradle"

sourceCompatibility = '1.7'
targetCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// Adding dependencies here will add the dependencies to each subproject.
dependencies {
    runtime libs.logback
    testCompile libs.junit
}

// Create basic folder structure
task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if (!srcDir.isDirectory()) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}

// Filter resources
//afterEvaluate {
//    configure( allProcessResourcesTasks() ) {
//        filter( ReplaceTokens, tokens: [
//                'build.version': project.version, 
//                'build.gradleVersion': project.gradle.gradleVersion
//            ] )
//    }
//}
//def allProcessResourcesTasks() {
//    sourceSets.all.processResourcesTaskName.collect {
//        tasks[it]
//    }
//}

// Generate Version Class
apply plugin: VersionClass

class VersionClass implements Plugin<Project>
{
    def void apply( Project project )
    {
        def generatedSrcDir = new File( project.buildDir, 'generated-src/version' )
        def genVersionClassTask = project.task( 'genVersionClass' ) << {
            def commit = "git rev-parse --short HEAD".execute().text.trim()
            def dirtyProc = "git diff --no-ext-diff --quiet".execute()
            dirtyProc.waitFor()
            def dirty = dirtyProc.exitValue() != 0
            def dateFormat = new java.text.SimpleDateFormat( "EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US )
            dateFormat.setTimeZone( TimeZone.getTimeZone( "GMT" ) )
            def now = dateFormat.format( new Date() )
            def outFile = new File( generatedSrcDir, "java/" + project.name.replace( '.', '/' ) + "/BuildVersion.java" )
            outFile.getParentFile().mkdirs()
            outFile.write( """
package """ + project.name.replace( '-', '_' ) + """;

/**
 * Generated class that store the version derived from the build system.
 */
public interface BuildVersion
{
    /** The last commit hash from the git history. */
    String COMMIT = \"""" + commit + """\";

    /** True if they were local changes when built. */
    boolean DIRTY = """+ dirty + """;

    /** The version of the project from the gradle build. */
    String VERSION = \"""" + project.version + """\";

    /** The name of the project from the gradle build. */
    String NAME = \"""" + project.name + """\";

    /** The group of the project from the gradle build. */
    String GROUP = \"""" + project.group + """\";

    /** The date this file was generated, usually the last date that the project was modified. */
    String DATE = \"""" + now + """\";

    /** The full details of the version, including the build date. */
    String DETAILED_VERSION = GROUP + ":" + NAME + ":" + VERSION + " " + COMMIT + " " + DATE;
}\n
""" )
        }
        genVersionClassTask.outputs.files generatedSrcDir
        project.getTasks().getByName( 'compileJava' ).source genVersionClassTask.outputs.files, project.sourceSets.main.java
    }
}



// Enable test output
test {
    testLogging {
        showStandardStreams = true
    }   
}

// Create sources JAR
task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Create javadoc JAR
javadoc {
    title = "${project.name} (${version})"
    options.encoding = 'UTF-8'
    options.docFilesSubDirs = true
    options.links(
        "http://docs.oracle.com/javase/7/docs/api/",
        "http://www.slf4j.org/apidocs/",
        "http://junit.sourceforge.net/javadoc/"
    )
    doLast {
        copy {
            from 'src/main/javadoc'
            into "${buildDir}/docs/javadoc"
        }
    }
}
task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Attach sources JAR
artifacts {
    archives jar 
    archives sourcesJar
    archives javadocJar
}

// POM Setup
configure( install.repositories.mavenInstaller ) {
    pom.groupId = project.group
    pom.artifactId = project.name
    pom.version = project.version
    pom.project {
        description = project.description
        url = "http://qiweb.org"
        inceptionYear '2013'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        scm {
            url 'https://github.com/qiweb/qiweb'
            connection 'scm:git:https://github.com/qiweb/qiweb.git'
            developerConnection 'scm:git:git@github.com/qiweb/qiweb.git'
        }
        developers {
            developer {
                id = "eskatos"
                name = "Paul Merlin"
                email = "paul@nosphere.org"
                timezone = "CET"
                roles {
                    role 'Core Team'
                }
            }
        }
    }   
}
