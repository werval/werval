
apply from: rootProject.file( '../gradle/common.gradle' )

// This is Java!
apply plugin: 'java'

// Archives signing
apply plugin: 'signing'
signing { sign configurations.archives }
signArchives.onlyIf { version != "0" && !version.contains( "SNAPSHOT" ) }

// Publication
apply plugin: 'maven-publish'
apply plugin: 'maven'

// Setup for install in local internal repository
// Use the new maven publication support in gradle
// Generated POM is minimal here as this repository is only used for inter-build dependencies
// WARNING Seems we're now using it for the distribution archive now
publishing {
    publications.create( 'qiWebLocalRepoPub' , MavenPublication ) {
        pom.withXml {
            // Gradle Publishing feature is exporting dependencies as 'runtime' scope,
            // rather than 'compile'; fix that.
            if( asNode().dependencies[0] ) {
                asNode().dependencies[0].dependency.each { dep -> dep.scope[0].value = 'compile' }
            }
        }
    }
    repositories {
        maven { name "QiWebLocal"; url "$rootProject.projectDir.absolutePath/../repository/" }
    }
}
task finalizeInstall( dependsOn: "publishQiWebLocalRepoPubPublicationToQiWebLocalRepository" )
install.finalizedBy finalizeInstall

// Setup remote artifact publication
// Use the now deprecated maven publication support in gradle
uploadArchives.doFirst {
    if( version == "0" ) {
        throw new RuntimeException( "'version' must be given as a system property to perform a release." )
    }
}
uploadArchives {
    repositories {
        mavenDeployer {
            if( !version.contains( "SNAPSHOT" ) ) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom( deployment ) }
            }
            repository( url: "https://repo.codeartisans.org/content/repositories/qiweb-releases" ) {
                authentication( userName: codeartisansNexusUsername, password: codeartisansNexusPassword)
            }
            snapshotRepository( url: "https://repo.codeartisans.org/content/repositories/qiweb-snapshots" ) {
                authentication( userName: codeartisansNexusUsername, password: codeartisansNexusPassword)
            }
        }
    }
}

// POM Setup for publication
[install.repositories.mavenInstaller, uploadArchives.repositories.mavenDeployer]*.pom {
    groupId = project.group
    artifactId = project.name
    version = project.version
    project {
        name project.name
        description project.description
        url "http://qiweb.org"
        inceptionYear '2013'
        organization {
            name 'QiWeb Community'
            url 'https://scm.codeartisans.org/qiweb'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        issueManagement {
            system 'Gitlab'
            url 'https://scm.codeartisans.org/qiweb/qiweb/issues'
        }
        scm {
            url 'https://scm.codeartisans.org/qiweb/qiweb'
            connection 'scm:git:https://scm.codeartisans.org/qiweb/qiweb.git'
            developerConnection 'scm:git:git@scm.codeartisans.org:qiweb/qiweb.git'
        }
        developers {
            developer {
                id "eskatos"
                name "Paul Merlin"
                email "paul@nosphere.org"
                timezone "Europe/Paris"
                roles {
                    role 'Founder'
                    role 'Developer'
                }
            }
        }
        contributors {
            contributor {
                name "Quentin Gensburger"
                email "quentin.gensburger@free.fr"
                timezone "Europe/Paris"
                roles {
                    role 'Contributor'
                }
            }
            /*
            contributor {
            name "Lionel Chanson"
            email "lionel@lionelchanson.fr"
            timezone "Europe/Paris"
            roles {
            role 'Contributor'
            }
            }
            contributor {
            name "Jean-Michel Tonneau"
            email "jmichel.tonneau@gmail.com"
            timezone "Europe/London"
            roles {
            role 'Contributor'
            }
            }
             */
        }
    }
}

