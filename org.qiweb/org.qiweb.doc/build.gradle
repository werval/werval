
description = "QiWeb Documentation"

// The produced JAR contains:
// - QiWeb Core documentation and javadocs
// - a Plugin for development mode that serve the core and dynamically discovered modules documentations at /@doc
//
// It is made available to application classloader by DevShell frontends (CLI, Gradle & Maven plugins).

dependencies {
    compile project( ":org.qiweb.api" )
    compile libs.sitemesh
}



//
//  _____ _ _ _ _     _      ____                            _       _   _
// |     |_| | | |___| |_   |    \ ___ ___ _ _ _____ ___ ___| |_ ___| |_|_|___ ___
// |  |  | | | | | -_| . |  |  |  | . |  _| | |     | -_|   |  _| .'|  _| | . |   |
// |__  _|_|_____|___|___|  |____/|___|___|___|_|_|_|___|_|_|_| |__,|_| |_|___|_|_|
//    |__|
// _____________________________________________________________________________________________________________________
// QiWeb Documentation Generation
//

def assetsSourcesPath = "$project.projectDir.absolutePath/src/assets"
def asciidocSourcesPath = "$project.projectDir.absolutePath/src/asciidoc"
def javadocSourcesPath = "$project.projectDir.absolutePath/src/javadoc"
def asciidocGenResourcesPath = "$project.projectDir.absolutePath/build/docs/asciidoc"
def javadocGenResourcesPath = "$project.projectDir.absolutePath/build/docs/embedded-javadoc"
def docResourcesSourceSetPath = "$project.projectDir.absolutePath/build/generated-src/doc/resources"



//
//  _____         _ _   _
// |  _  |___ ___|_|_|_| |___ ___
// |     |_ -|  _| | | . | . |  _|
// |__|__|___|___|_|_|___|___|___|
// _____________________________________________________________________________________________________________________
// Generate asciidoc into build/docs/asciidoc
//

buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/content/aalmiray/asciidoctor' }
        maven { url 'http://jcenter.bintray.com' }
    }
    dependencies { classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.0' }
}
apply plugin: 'asciidoctor'
asciidoctor {
    inputs.dir file( assetsSourcesPath )
    baseDir = file( asciidocSourcesPath )
    sourceDir = file( asciidocSourcesPath )
    outputDir = file( asciidocGenResourcesPath )
    backend = 'html5'
    logDocuments = true
    options = [
        compact: true,
        attributes: [
            'qiweb-version': version,
            'toc2': '',
            'stylesheet': "$assetsSourcesPath/stylesheets/foundation.css",
            'icons': 'font',
            'docinfo1': '',
        ]
    ]
    doLast {
        copy {
            from assetsSourcesPath
            into asciidocGenResourcesPath
        }
    }
}



//
//     __               _
//  __|  |___ _ _ ___ _| |___ ___
// |  |  | .'| | | .'| . | . |  _|
// |_____|__,|\_/|__,|___|___|___|
// _____________________________________________________________________________________________________________________
// Generate javadoc into build/docs/embedded-javadoc
//

// Included projects
def embeddedJavadocProjects() {
    rootProject.subprojects.findAll { p ->
        p.name == 'org.qiweb.api' || p.name == 'org.qiweb.spi' || p.name == 'org.qiweb.test'
    }
}

// Dependency to included projects
configurations { embeddedJavadocConfiguration }
dependencies { embeddedJavadocProjects().each { p -> embeddedJavadocConfiguration p } }

// Dependency to UMLGraph
// QUID Replace with http://www.yworks.com/en/products_ydoc.html ?
configurations { umlgraphDoclet }
dependencies { umlgraphDoclet 'org.umlgraph:umlgraph:5.6.6' }

// Javadoc Task
task generateEmbeddedJavadoc( type: Javadoc ) {
    title = "QiWeb API Reference (${version})"
    classpath = files( embeddedJavadocProjects().collect { p -> p.sourceSets.main.compileClasspath } )
    source = embeddedJavadocProjects().collect { p -> p.sourceSets.main.allJava }
    exclude "**/internal/**"
    destinationDir = file( javadocGenResourcesPath )
    options.encoding = 'UTF-8'
    options.overview = file( "$javadocSourcesPath/overview.html" )
    options.docFilesSubDirs = true
    options.links(
        "http://docs.oracle.com/javase/8/docs/api/",
        "http://www.slf4j.org/apidocs/",
        "http://junit.org/javadoc/latest/"
    )
    options.group( [
            "QiWeb API":               [ "org.qiweb.api",       "org.qiweb.api.*"       ],
            "QiWeb Test Support":      [ "org.qiweb.test",      "org.qiweb.test.*"      ],
            "QiWeb SPI":               [ "org.qiweb.spi",       "org.qiweb.spi.*"       ]
        ] )
    options.docletpath = configurations.umlgraphDoclet.files as List
    options.doclet = "org.umlgraph.doclet.UmlGraphDoc"
    inputs.dir file( assetsSourcesPath )
    doLast {
        copy {
            from "$assetsSourcesPath/images"
            into "$javadocGenResourcesPath/images"
        }
        copy {
            from embeddedJavadocProjects().collect { p -> p.file( "$p.projectDir.absolutePath/src/main/javadoc" ) }
            into javadocGenResourcesPath
        }
    }
}



//
//  _____                   _   _
// |  _  |___ ___ ___ _____| |_| |_ _
// |     |_ -|_ -| -_|     | . | | | |
// |__|__|___|___|___|_|_|_|___|_|_  |
//                               |___|
// _____________________________________________________________________________________________________________________
// Put all documentation resources into build/generated-src/doc/resources
//

task generateDocumentation( dependsOn: [ asciidoctor, generateEmbeddedJavadoc ] ) {
    outputs.dir file( docResourcesSourceSetPath )
    doLast {
        copy {
            from asciidocGenResourcesPath
            into docResourcesSourceSetPath + '/org/qiweb/doc/html'
        }
        copy {
            from javadocGenResourcesPath
            into docResourcesSourceSetPath + '/org/qiweb/doc/html/api'
        }
    }
}
sourceSets.main.resources.srcDirs += file( docResourcesSourceSetPath )

processResources.dependsOn generateDocumentation
