
description = "QiWeb Documentation"

// The produced JAR contains:
// - QiWeb Core documentation and javadocs
// - a Plugin for development mode that serve the core and dynamically discovered modules documentations at /@doc
//
// It is made available to application classloader by DevShell frontends (CLI, Gradle & Maven plugins).

dependencies {
    compile project( ":org.qiweb.api" )
    compile libs.sitemesh

    testCompile project( ":org.qiweb.test" )
    testCompile libs.rest_assured
}



//
//  _____
// |  |  |___ ___ ___ ___
// |     | . |  _| . |   |
// |__|__|___|___|___|_|_|
// _____________________________________________________________________________________________________________________
// Out-of-build task to fetch HOCON format documentation and convert it to Asciidoc, needs pandoc
//

task fetchHoconDoc(type: Exec) {
    // Fetch original Markdown file
    doFirst {
        file( 'build/tmp/hocon' ).mkdirs()
        ant.get( src:'https://raw.githubusercontent.com/typesafehub/config/master/HOCON.md', dest: 'build/tmp/hocon/HOCON.md' )
    }
    // Convert it to Asciidoc
    commandLine 'pandoc', 'build/tmp/hocon/HOCON.md', '-f', 'markdown', '-t', 'asciidoc', '-s', '--atx-headers', '-o', 'build/tmp/hocon/hocon.adoc'
    // Add proper headers, preamble and TOC
    doLast {
        def hoconAdoc = file('build/tmp/hocon/hocon.adoc')
        def content = ""
        def lineCount = 1;
        hoconAdoc.eachLine { line ->
            if( lineCount == 3 ) {
                content += """:jbake-type: page
:title: HOCON (Human-Optimized Config Object Notation)
:description: HOCON format specification
:keywords: qiweb, documentation, configuration, hocon
:toc: right
:toc-title: HOCON

This file was generated from the original link:https://github.com/typesafehub/config/blob/master/HOCON.md[HOCON]
specification published by TypeSafe under the Apache License 2.0.

toc::[]

"""
            }
            content += line + "\n"
            lineCount++;
        }
        file( 'src/jbake/content/hocon.adoc' ).write( content )
    }
}



//
//     __               _
//  __|  |___ _ _ ___ _| |___ ___
// |  |  | .'| | | .'| . | . |  _|
// |_____|__,|\_/|__,|___|___|___|
// _____________________________________________________________________________________________________________________
// Generate javadoc into build/docs/embedded-javadoc
//

// Included projects
def embeddedJavadocProjects() {
    rootProject.subprojects.findAll { p ->
        p.name == 'org.qiweb.api' || p.name == 'org.qiweb.spi' || p.name == 'org.qiweb.test'
    }
}

// Dependency to included projects
configurations { embeddedJavadocConfiguration }
dependencies { embeddedJavadocProjects().each { p -> embeddedJavadocConfiguration p } }

// Dependency to UMLGraph
// QUID Replace with http://www.yworks.com/en/products_ydoc.html ?
configurations { umlgraphDoclet }
dependencies { umlgraphDoclet 'org.umlgraph:umlgraph:5.6.6' }

// Javadoc Task
def javadocGenResourcesPath = "$project.projectDir.absolutePath/build/docs/embedded-javadoc"
task generateEmbeddedJavadoc( type: Javadoc ) {
    title = "QiWeb API Reference (${version})"
    classpath = files( embeddedJavadocProjects().collect { p -> p.sourceSets.main.compileClasspath } )
    source = embeddedJavadocProjects().collect { p -> p.sourceSets.main.allJava }
    exclude "**/internal/**"
    destinationDir = file( javadocGenResourcesPath )
    options.encoding = 'UTF-8'
    options.overview = file( "src/javadoc/overview.html" )
    options.docFilesSubDirs = true
    options.links(
        "http://docs.oracle.com/javase/8/docs/api/",
        "http://www.slf4j.org/apidocs/",
        "http://junit.org/javadoc/latest/"
    )
    options.group( [
            "API":               [ "org.qiweb.api",           "org.qiweb.api.*"           ],
            "Controllers":       [ "org.qiweb.controllers",   "org.qiweb.controllers.*"   ],
            "Filters":           [ "org.qiweb.filters",       "org.qiweb.filters.*"       ],
            "Utilities":         [ "org.qiweb.util",          "org.qiweb.util.*"          ],
            "Test Support":      [ "org.qiweb.test",          "org.qiweb.test.*"          ],
            "SPI":               [ "org.qiweb.spi",           "org.qiweb.spi.*"           ]
        ] )
    options.docletpath = configurations.umlgraphDoclet.files as List
    options.doclet = "org.umlgraph.doclet.UmlGraphDoc"
    inputs.dir file( 'src/javadoc' )
    doLast {
        copy {
            from "src/javadoc/assets"
            into javadocGenResourcesPath
        }
        copy {
            from embeddedJavadocProjects().collect { p -> p.file( "$p.projectDir.absolutePath/src/main/javadoc" ) }
            into javadocGenResourcesPath
        }
    }
}



//
//  _____     _   _
// | __  |___| |_|_|___ ___
// | __ -| .'| '_| |   | . |
// |_____|__,|_,_|_|_|_|_  |
// ____________________|___|____________________________________________________________________________________________
// Generate static documentation website using JBake
//

buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/melix/jbake-gradle-plugin' }
    }
    dependencies {
        classpath 'me.champeau.gradle:jbake-gradle-plugin:0.1'
        classpath 'org.asciidoctor:asciidoctor-java-integration:0.1.4'
        classpath 'org.freemarker:freemarker:2.3.19'
    }
}
apply plugin: 'jbake'

task prepareJBakeInput(type: Copy) {
    from file('src/jbake')
    into file('build/tmp/jbake')
}
task prepareJBakeJavadoc(type: Copy) {
    dependsOn generateEmbeddedJavadoc
    from javadocGenResourcesPath
    into file('build/tmp/jbake/assets/api')
}
jbake {
    dependsOn prepareJBakeInput, prepareJBakeJavadoc
    input file( 'build/tmp/jbake' )
    configuration = [
        'qiweb_version': version
    ]
}


//
//  _____                   _   _
// |  _  |___ ___ ___ _____| |_| |_ _
// |     |_ -|_ -| -_|     | . | | | |
// |__|__|___|___|___|_|_|_|___|_|_  |
// ______________________________|___|__________________________________________________________________________________
// Put all documentation resources into build/generated-src/doc/resources
//

def docResourcesSourceSetPath = "$project.projectDir.absolutePath/build/generated-src/doc/resources"
task generateDocumentation(type: Copy, dependsOn: jbake ) {
    from jbake.output
    into file( docResourcesSourceSetPath + '/org/qiweb/doc/html' )
}
sourceSets.main.resources.srcDirs += file( docResourcesSourceSetPath )
processResources.dependsOn generateDocumentation


//
//  _____     _   _ _         _   _
// |  _  |_ _| |_| |_|___ ___| |_|_|___ ___
// |   __| | | . | | |  _| .'|  _| | . |   |
// |__|  |___|___|_|_|___|__,|_| |_|___|_|_|
// _____________________________________________________________________________________________________________________
//

// Publish documentation sources ZIP with qiweb-doc classifier
task qiwebDocZip(type: Zip, dependsOn: jbake) {
    classifier = 'qiweb-doc'
    from jbake.input
}
artifacts { archives qiwebDocZip }
publishing { publications { qiWebLocalRepoPub { artifact(qiwebDocZip) { classifier = 'qiweb-doc'; extension = 'zip' } } } }

