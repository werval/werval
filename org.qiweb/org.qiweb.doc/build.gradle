// QiWeb Documentation

def asciidocSource = "$project.projectDir.absolutePath/src/asciidoc"
def assetsSource = "$project.projectDir.absolutePath/src/assets"
def htmlTarget = "$project.projectDir.absolutePath/build/classes/main/org/qiweb/doc/html"


// Static assets
task copyAssets( type: Copy ) {
    from assetsSource
    into htmlTarget
}


// Asciidoc processing
buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/content/aalmiray/asciidoctor' }
        maven { url 'http://jcenter.bintray.com' }
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.0'
    }
}
apply plugin: 'asciidoctor'
asciidoctor {
    sourceDir = file( asciidocSource )
    outputDir = file( htmlTarget )
    backend = 'html5'
    options = [
        compact: true,
        attributes: [
            'qiweb-version': version,
            'toc2': '',
            'stylesheet': "$assetsSource/stylesheets/foundation.css",
            'icons': 'font',
            'docinfo1': '',
        ]
    ]
    logDocuments = true
}
asciidoctor.dependsOn copyAssets
jar.dependsOn asciidoctor


// Embedded Javadoc
configurations { umlgraphDoclet }
dependencies { umlgraphDoclet 'org.umlgraph:umlgraph:5.6.6' }
def embeddedJavadocProjects() {
    rootProject.subprojects.findAll { p ->
        p.name == 'org.qiweb.api' || p.name == 'org.qiweb.spi' || p.name == 'org.qiweb.test'
    }
}
task embeddedJavadoc( type: Javadoc ) {
    title = "QiWeb API Reference (${version})"
    source = embeddedJavadocProjects().collect { p -> p.sourceSets.main.allJava }
    classpath = files( embeddedJavadocProjects().collect { p -> p.sourceSets.main.compileClasspath } )
    destinationDir = file( "$htmlTarget/api" )
    options.encoding = 'UTF-8'
    options.overview = file( "$project.projectDir.absolutePath/src/javadoc/overview.html" )
    options.docFilesSubDirs = true
    options.links(
        "http://docs.oracle.com/javase/8/docs/api/",
        "http://www.slf4j.org/apidocs/",
        "http://junit.org/javadoc/latest/"
    )
    options.group( [
            "QiWeb API":               [ "org.qiweb.api",       "org.qiweb.api.*"     ],
            "QiWeb Test Support":      [ "org.qiweb.test",      "org.qiweb.test.*"    ],
            "QiWeb SPI":               [ "org.qiweb.spi",       "org.qiweb.spi.*"     ]
        ] )
    options.docletpath = configurations.umlgraphDoclet.files.asType( List )
    options.doclet = "org.umlgraph.doclet.UmlGraphDoc"
    doLast {
        copy {
            from "$assetsSource/images"
            into "$htmlTarget/api/images"
        }
    }
    doLast {
        copy {
            from embeddedJavadocProjects().collect { p -> p.file( "$project.projectDir.absolutePath/src/main/javadoc" ) }
            into "$htmlTarget/api"
        }
    }
}
jar.dependsOn embeddedJavadoc
