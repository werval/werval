buildscript {
    repositories {
        mavenCentral();
        maven { url "$rootProject.projectDir.absolutePath/../repository" }
    }
    dependencies {
        classpath 'de.obqo.gradle:gradle-lesscss-plugin:1.0-1.3.3'
        classpath "org.qiweb:org.qiweb.gradle:0"
    }
}

configurations {
    assets
}

dependencies {

    assets webjars.angular
    assets webjars.bootstrap
    assets webjars.jquery
    assets webjars.marked

    compile "org.qiweb:org.qiweb.api:$version"
    compile "org.qiweb:org.qiweb.lib:$version"
    compile "org.qiweb:org.qiweb.modules.jndi:$version"
    compile "org.qiweb:org.qiweb.modules.jpa:$version"
    compile "org.qiweb:org.qiweb.modules.rythm:$version"
    compile libs.hibernate_validator
    compile libs.jackson_core
    compile libs.liquibase
    compile 'com.ninja-squad:DbSetup:1.2.0'

    runtime "org.qiweb:org.qiweb.server.bootstrap:$version"
    runtime libs.el
    runtime libs.h2
    runtime libs.logback
    runtime libs.postgres

    testCompile "org.qiweb:org.qiweb.test:$version"
    testCompile libs.fluentlenium
    testCompile libs.rest_assured

}

apply plugin: 'qiweb'
qiweb {
    extraWatch += [ "src/main/assets" ]
}

apply plugin: 'application'
applicationName = "beer-database"
mainClassName = "org.qiweb.server.bootstrap.Main"
applicationDistribution.from( "src/main/resources" ) {
    include "*.conf"
    into "etc"
}
tasks.startScripts {
    doLast {
        def scriptShellFile = file "${outputDir}/${applicationName}"
        def scriptBatchFile = file "${outputDir}/${applicationName}.bat"
        scriptShellFile.text = scriptShellFile.text.replace( 'CLASSPATH=$APP_HOME/lib',
                                                             'CLASSPATH=$APP_HOME/etc/:$APP_HOME/lib')
        scriptBatchFile.text = scriptBatchFile.text.replace( 'CLASSPATH=%APP_HOME%\\lib',
                                                             'CLASSPATH=%APP_HOME%\\etc\\;%APP_HOME%\\lib' )
    }
}
artifacts {
    archives distZip
}




//  _____             _
// |  _  |___ ___ ___| |_ ___
// |     |_ -|_ -| -_|  _|_ -|
// |__|__|___|___|___|_| |___|
// ____________________________________________________________________________
//

task extractWebJars( type: Copy ) {
    inputs.file 'build.gradle'
    configurations.assets.files.each {
        from zipTree( it ).matching {
            include 'META-INF/resources/webjars/**'
        }
    }
    eachFile {
        it.path = it.path.replaceAll( 'META-INF/resources/webjars/', '' )
    }
    into 'build/webjars'
}

task concatJs( dependsOn: extractWebJars ) {
    inputs.dir 'src/main/assets/js'
    inputs.dir 'build/webjars'
    outputs.file 'build/assets/js/main.js'
    doLast {
        ant.concat( destfile: 'build/assets/js/main.js' ) {
            fileset( file: 'build/webjars/marked/0.2.10/marked.js' )
            fileset( file: 'build/webjars/jquery/2.1.0/jquery.js' )
            fileset( file: 'build/webjars/bootstrap/3.0.3/js/bootstrap.js' )
            fileset( file: 'build/webjars/angularjs/1.2.13/angular.js' )
            fileset( file: 'build/webjars/angularjs/1.2.13/angular-route.js' )
            fileset( file: 'build/webjars/angularjs/1.2.13/angular-sanitize.js' )
            fileset( file: 'src/main/assets/js/main.js' )
        }
    }
}

task prepareLessFiles( type: Copy, dependsOn: extractWebJars ) {
    from 'build/webjars/bootstrap/3.0.3/less'
    from 'src/main/assets/less/main.less'
    into 'build/less'
}

apply plugin: 'lesscss'
lesscss {
    source = fileTree( 'build/less' ) {
        include 'main.less'
    }
    dest = 'build/assets/css'
    compress = true
}
task optimizeCss( type: de.obqo.gradle.lesscss.LessTask, dependsOn: prepareLessFiles ) { }

task copyFonts( type: Copy, dependsOn: extractWebJars ) {
    from 'build/webjars/bootstrap/3.0.3/fonts'
    into 'build/generated-src/assets/resources/assets/fonts'
}

task copyAssets( type: Copy, dependsOn: [ concatJs, optimizeCss, copyFonts ] ) {
    from 'build/assets'
    into 'build/generated-src/assets/resources/assets'
}

processResources.dependsOn copyAssets
sourceSets.main.resources.srcDir file( "build/generated-src/assets/resources" )
